<mxEditor defaultGroup="group" defaultEdge="connector">
<!-- 
	The following line is used to dynamically add a configuration hook for various backends.
	The hook must have an ASP.NET extension because IIS does not handle any other extensions.
	In the Dotnet and Java server examples, this hook is implemented so that it returns the
	required configuration for using a backend, namely, the diagrameditor-backend.xml 
	in the java and dotnet directories, respectively.
 -->
 
 <!-- editor-commons.xml begin -->
	<ui>
		<resource basename="resources/mxApplication"/>
	</ui>
	<mxDefaultPopupMenu as="popupHandler">		
		<add as="cut" action="cut" icon="images/cut.gif"/>
		<add as="copy" action="copy" icon="images/copy.gif"/>
		<add as="paste" action="paste" icon="images/paste.gif"/>
		<separator/>
		<add as="delete" action="delete" icon="images/delete.gif" if="cell"/>
		<separator/>
		<add as="exitGroup" action="exitGroup" icon="images/up.gif" if="notRoot"/>
		<add as="enterGroup" action="enterGroup" icon="images/down.gif" if="validRoot"/>
		<separator/>
		<add as="shape" if="cell">
			<add as="group" action="group" icon="images/group.gif" if="ncells"/>
			<add as="ungroup" action="ungroup" icon="images/ungroup.gif" if="cell"/>
			<separator/>
			<add as="removeFromParent" action="removeFromParent" if="cell"/>
			<separator/>
			<add as="collapse" action="collapse" icon="images/collapse.gif" if="expandable"/>
			<add as="expand" action="expand" icon="images/expand.gif" if="collapsable"/>
			<separator/>
			<add as="toFront" action="toFront" icon="images/tofront.gif" if="cell"/>
			<add as="toBack" action="toBack" icon="images/toback.gif" if="cell"/>
			<separator/>
			<add as="editStyle" action="editStyle" if="cell"/>
		</add>
		<add as="format" if="cell">
			<add as="fillColor" action="fillColor" icon="images/fillcolor.gif" if="cell"/>
			<add as="gradientColor" action="gradientColor" if="cell"/>
			<add as="strokeColor" action="strokeColor" icon="images/linecolor.gif" if="cell"/>
			<separator/>
			<add as="toggleRounded" action="toggleRounded" if="cell"/>
			<add as="toggleShadow" action="toggleShadow" if="cell"/>
		</add>
		<add as="font" if="cell">
			<add as="fontColor" action="fontColor" icon="images/fontcolor.gif" if="cell"/>
			<add as="fontFamily" action="fontFamily" if="cell"/>
			<add as="fontSize" action="fontSize" if="cell"/>
			<separator/>
			<add as="bold" action="bold" icon="images/bold.gif" if="cell"/>
			<add as="italic" action="italic" icon="images/italic.gif" if="cell"/>
		</add>
		<separator/>
	</mxDefaultPopupMenu>
	<Array as="actions">
		<add as="open"><![CDATA[
			function (editor)
			{
				editor.open(mxUtils.prompt('\u8bf7\u8f93\u5165\u6587\u4ef6\u540d\u79f0\uff1a', ''));
			}
		]]></add>
		<add as="openHref"><![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getCurrentRoot();

					if (cell == null)
					{
						cell = editor.graph.getModel().getRoot();
					}
				}

				if (cell != null)
				{
					var href = cell.getAttribute('href');
					
					if (href != null && href.length > 0)
					{
						window.open(href);
					}
					else
					{
						mxUtils.alert('No URL defined. Showing properties...');
						editor.execute('showProperties', cell);
					}
				}
			}
		]]></add>
		<add as="editStyle"><![CDATA[
			function (editor)
			{
				var cell = editor.graph.getSelectionCell();
				
				if (cell != null)
				{
					var model = editor.graph.getModel();
					var style = mxUtils.prompt(mxResources.get('enterStyle'), model.getStyle(cell) || '');

					if (style != null)
					{
						model.setStyle(cell, style);
					}
				}
			}
		]]></add>
		<add as="fillColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.model.beginUpdate();
					try
					{
						editor.graph.setCellStyles("strokeColor", color);
						editor.graph.setCellStyles("fillColor", color);
					}
					finally
					{
						editor.graph.model.endUpdate();
					}
				}
			}
		]]></add>
		<add as="gradientColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'white');
				
				if (color != null)
				{
					editor.graph.setCellStyles("gradientColor", color);
				}
			}
		]]></add>
		<add as="strokeColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.setCellStyles("strokeColor", color);
				}
			}
		]]></add>
		<add as="fontColor"><![CDATA[
			function (editor)
			{
				var color = mxUtils.prompt(mxResources.get('enterColorname'), 'red');
				
				if (color != null)
				{
					editor.graph.setCellStyles("fontColor", color);
				}
			}
		]]></add>
		<add as="fontFamily"><![CDATA[
			function (editor)
			{
				var family = mxUtils.prompt(mxResources.get('enterFontfamily'), 'Arial');
				
				if (family != null && family.length > 0)
				{
					editor.graph.setCellStyles("fontFamily", family);
				}
			}
		]]></add>
		<add as="fontSize"><![CDATA[
			function (editor)
			{
				var size = mxUtils.prompt(mxResources.get('enterFontsize'), '10');
				
				if (size != null && size > 0 && size < 999)
				{
					editor.graph.setCellStyles("fontSize", size);
				}
			}
		]]></add>
		<add as="image"><![CDATA[
			function (editor)
			{
				var image = mxUtils.prompt(mxResources.get('enterImageUrl'),
					'examples/images/image.gif');
				
				if (image != null)
				{
					editor.graph.setCellStyles("image", image);
				}
			}
		]]></add>
		<add as="opacity"><![CDATA[
			function (editor)
			{
				var opacity = mxUtils.prompt(mxResources.get('enterOpacity'), '100');
				
				if (opacity != null && opacity >= 0 && opacity <= 100)
				{
					editor.graph.setCellStyles("opacity", opacity);
				}
			}
		]]></add>
		<add as="straightConnector"><![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("straightEdge");
			}
		]]></add>
		<add as="elbowConnector"><![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("");
			}
		]]></add>
		<add as="arrowConnector"><![CDATA[
			function (editor)
			{
				editor.graph.setCellStyle("arrowEdge");
			}
		]]></add>
		<add as="toggleOrientation"><![CDATA[
			function (editor, cell)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_HORIZONTAL, true);
			}
		]]></add>
		<add as="toggleRounded"><![CDATA[
			function (editor)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_ROUNDED);
			}
		]]></add>
		<add as="toggleShadow"><![CDATA[
			function (editor)
			{
				editor.graph.toggleCellStyles(mxConstants.STYLE_SHADOW);
			}
		]]></add>
		<add as="horizontalTree"><![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getDefaultParent();
				}
				
				editor.treeLayout(cell, true);
			}
		]]></add>
		<add as="verticalTree"><![CDATA[
			function (editor, cell)
			{
				cell = cell || editor.graph.getSelectionCell();
				
				if (cell == null)
				{
					cell = editor.graph.getDefaultParent();
				}
				
				editor.treeLayout(cell, false);
			}
		]]></add>
	</Array>
	
	<!-- editor-commons.xml end -->
	
	
	<add as="onInit"><![CDATA[
		function (isFirstTime)
		{
			onInit(this, isFirstTime);
		}
	]]></add>
	<ui>
		<add as="graph" element="graph"/>
		<add as="status" element="status"/>
		<add as="toolbar" element="toolbar"/>
	</ui>
	<Array as="templates">
		<add as="group">
			<Group label="" href="">
				<mxCell vertex="1" style="group" connectable="0"/>
			</Group>
		</add>
		<add as="connector">
			<Connector label="" >
				<mxCell edge="1">
					<mxGeometry as="geometry" relative="1"/>
				</mxCell>
			</Connector>
		</add>
		<add as="container">
			<Container label="Container" href="">
				<mxCell vertex="1" style="swimlane" connectable="0">
					<mxGeometry as="geometry" width="150" height="150"/>
				</mxCell>
			</Container>
		</add>
		<add as="rectangle">
			<Rect label="Shape" href="">
				<mxCell vertex="1">	
					<mxGeometry as="geometry" width="70" height="35"/>
				</mxCell>
			</Rect>
		</add>
		<add as="text">
			<Text label="Text Here" href="">
				<mxCell vertex="1" style="text">	
					<mxGeometry as="geometry" width="70" height="20"/>
				</mxCell>
			</Text>
		</add>
		<add as="image">
			<Image label="BEGIN" 属性A="" 属性B="">
				<mxCell vertex="1" style="image">	
					<mxGeometry as="geometry" width="33" height="33"/>
				</mxCell>
			</Image>
		</add>
		<add as="image2">
			<Image label="END" 属性B="" 属性C="">
				<mxCell vertex="1" style="image2">	
					<mxGeometry as="geometry" width="33" height="33"/>
				</mxCell>
			</Image>
		</add>
		<add as="image3">
			<Image label="DBConnec" 属性D="" 属性E="">
				<mxCell vertex="1" style="image3">	
					<mxGeometry as="geometry" width="33" height="33"/>
				</mxCell>
			</Image>
		</add>
		<add as="rounded">
			<Roundrect label="Shape" href="">
				<mxCell vertex="1" style="rounded">		
					<mxGeometry as="geometry" width="70" height="35"/>
				</mxCell>
			</Roundrect>
		</add>
		<add as="shape">
			<Shape label="Shape" href="">
				<mxCell vertex="1" style="ellipse">		
					<mxGeometry as="geometry" width="50" height="50"/>
				</mxCell>
			</Shape>
		</add>
		<add as="actor">
			<Shape label="Shape" href="">
				<mxCell vertex="1" style="actor">		
					<mxGeometry as="geometry" width="40" height="50"/>
				</mxCell>
			</Shape>
		</add>
		<add as="cloud">
			<Shape label="Shape" href="">
				<mxCell vertex="1" style="cloud">		
					<mxGeometry as="geometry" width="70" height="50"/>
				</mxCell>
			</Shape>
		</add>
		<add as="hline">
			<Shape label="" href="">
				<mxCell vertex="1" style="ellipse">		
					<mxGeometry as="geometry" width="50" height="10"/>
				</mxCell>
			</Shape>
		</add>
	</Array>
	<mxGraph as="graph" alternateEdgeStyle="verticalConnector" allowLoops="1" dropEnabled="1">
		<add as="isAutoSizeCell"><![CDATA[
			function(cell)
			{
				return mxUtils.isNode(this.model.getValue(cell), 'text');
			}
		]]></add>
		<add as="isSwimlane"><![CDATA[
			function (cell)
			{
				return mxUtils.isNode(this.model.getValue(cell), 'container');
			}
		]]></add>
		<add as="getTooltipForCell"><![CDATA[
			function(cell)
			{
				return '<b>'+cell.getAttribute('label')+
						'</b> ('+cell.getId()+')'+
						'<br>Style: '+cell.getStyle()+
						'<br>Connections: '+cell.getEdgeCount()+
						'<br>Children: '+cell.getChildCount();
			}
		]]></add>
		<add as="convertValueToString"><![CDATA[
			function(cell)
			{
				return cell.getAttribute('label');
			}
		]]></add>
		<mxStylesheet as="stylesheet">
			<add as="text">
				<add as="shape" value="rectangle"/>
				<add as="perimeter" value="rectanglePerimeter"/>
				<add as="fontSize" value="12"/>
				<add as="align" value="left"/>
				<add as="verticalAlign" value="top"/>
			</add>
			<add as="defaultVertex" extend="text">
				<add as="shape" value="rectangle"/>
				<add as="fontSize" value="11"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="top"/>
				<add as="shadow" value="0"/>
				<add as="strokeColor" value="#B4B4B4"/>
				<add as="fillColor" value="#EAEAEA"/>
				<add as="gradientColor" value="white"/>
			</add>
			<add as="group">
				<add as="shape" value="rectangle"/>
				<add as="perimeter" value="rectanglePerimeter"/>
				<add as="fontSize" value="10"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="top"/>
				<add as="strokeColor" value="gray"/>
				<add as="dashed" value="1"/>
			</add>
			<add as="defaultEdge">
				<add as="shape" value="connector"/>
				<add as="fontSize" value="12"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="top"/>
				<add as="rounded" value="1"/>
				<add as="labelBackgroundColor" value="white"/>
				<add as="strokeColor" value="#36393D"/>
				<add as="strokeWidth" value="1"/>
				<add as="edgeStyle" value="elbowEdgeStyle"/>
				<add as="endArrow" value="classic"/>
			</add>
			<add as="verticalConnector" extend="defaultEdge">
				<add as="elbow" value="vertical"/>
			</add>
			<add as="straightConnector">
				<add as="shape" value="connector"/>
				<add as="endArrow" value="classic"/>
				<add as="labelBackgroundColor" value="white"/>
				<add as="strokeColor" value="#36393D"/>
				<add as="strokeWidth" value="1"/>
				<add as="edgeStyle">null</add>
			</add>
			<add as="arrowConnector" extend="defaultEdge">
				<add as="shape" value="arrow"/>
				<add as="fillColor" value="#EAEAEA"/>
				<add as="endSize" value="20"/>
				<remove as="edgeStyle"/>
			</add>
			<add as="swimlane" extend="defaultVertex">
				<add as="shape" value="swimlane"/>
				<add as="shadow" value="0"/>
				<add as="startSize" value="23"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="top"/>
				<add as="strokeColor" value="#B4B4B4"/>
				<add as="fillColor" value="#EAEAEA"/>
			</add>
			<add as="rounded" extend="defaultVertex">
				<add as="rounded" value="1"/>
			</add>
			<add as="ellipse" extend="defaultVertex">
				<add as="shape" value="ellipse"/>
				<add as="perimeter" value="ellipsePerimeter"/>
				<add as="strokeColor" value="#B4B4B4"/>
				<add as="fillColor" value="#EAEAEA"/>
			</add>
			<add as="doubleEllipse" extend="ellipse">
				<add as="shape" value="doubleEllipse"/>
			</add>
			<add as="rhombus" extend="defaultVertex">
				<add as="shape" value="rhombus"/>
				<add as="perimeter" value="rhombusPerimeter"/>
				<add as="strokeColor" value="#B4B4B4"/>
				<add as="fillColor" value="#EAEAEA"/>
			</add>
			<add as="triangle" extend="rhombus">
				<add as="shape" value="triangle"/>
				<add as="perimeter" value="trianglePerimeter"/>
				<add as="align" value="left"/>
			</add>
			<add as="hexagon" extend="defaultVertex">
				<add as="shape" value="hexagon"/>
			</add>
			<add as="actor" extend="defaultVertex">
				<add as="shape" value="actor"/>
				<add as="strokeColor" value="#B4B4B4"/>
				<add as="fillColor" value="#EAEAEA"/>
			</add>
			<add as="cloud" extend="defaultVertex">
				<add as="shape" value="cloud"/>
				<add as="perimeter" value="ellipsePerimeter"/>
				<add as="strokeColor" value="#B4B4B4"/>
				<add as="fillColor" value="#EAEAEA"/>
			</add>
			<add as="cylinder" extend="defaultVertex">
				<add as="shape" value="cylinder"/>
				<add as="spacingTop" value="10"/>
				<add as="strokeColor" value="#B4B4B4"/>
				<add as="fillColor" value="#EAEAEA"/>
			</add>
			<add as="hline">
				<add as="shape" value="line"/>
				<add as="strokeWidth" value="3"/>
				<add as="perimeter" value="rectanglePerimeter"/>
				<add as="fontColor" value="black"/>
				<add as="fontSize" value="10"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="bottom"/>
				<add as="strokeColor" value="#36393D"/>
			</add>
			<add as="image">
				<add as="shape" value="image"/>
				<add as="perimeter" value="rectanglePerimeter"/>
				<add as="fontSize" value="11"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="top"/>
				<add as="image" value="images/icon/9.png"/>
			</add>
			<add as="image2">
				<add as="shape" value="image"/>
				<add as="perimeter" value="rectanglePerimeter"/>
				<add as="fontSize" value="11"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="top"/>
				<add as="image" value="images/icon/10.png"/>
			</add>
			<add as="image3">
				<add as="shape" value="image"/>
				<add as="perimeter" value="rectanglePerimeter"/>
				<add as="fontSize" value="11"/>
				<add as="align" value="center"/>
				<add as="verticalAlign" value="top"/>
				<add as="image" value="images/icon/1.png"/>
			</add>
		</mxStylesheet>
		<mxGraphModel as="model">
			<add as="valueForCellChanged"><![CDATA[
				function(cell, value)
				{
					var previous = null;
					
					if (isNaN(value.nodeType))
					{
						previous = cell.getAttribute('label');
						cell.setAttribute('label', value);
					}
					else
					{
						previous = cell.value;
						cell.value = value;
					}
					
					return previous;
				}
			]]></add>
			<root>
				<!--<Diagram label="My Diagram" href="http://www.mxgraph.com/" id="0">  modify on 20100921-->
				<Diagram label="My Diagram" id="-1">
					<mxCell/>
				</Diagram>
				<Layer label="Default Layer" id="0">
					<mxCell parent="-1"/>
				</Layer>
			</root>
		</mxGraphModel>
	</mxGraph>
	<mxDefaultToolbar as="toolbar">
		<add as="折线" mode="connect" icon="images/icon/11a.png"><![CDATA[
			function (editor)
			{
				if (editor.defaultEdge != null)
				{
					editor.defaultEdge.style = null;
				}
			}
		]]></add>
		<add as="直线" mode="connect" icon="images/icon/2a.png"><![CDATA[
			function (editor)
			{
				if (editor.defaultEdge != null)
				{
					editor.defaultEdge.style = 'straightConnector';
				}
			}
		]]></add>
		<add as="开始" template="image" icon="images/icon/9a.png"/>
		<add as="结束" template="image2" icon="images/icon/10a.png"/>
		<add as="DBConnec" template="image3" icon="images/icon/1a.png"/>
	</mxDefaultToolbar>
	
	<!-- keyhandler-commons.xml begin -->
	<mxDefaultKeyHandler as="keyHandler">
		<add as="8" action="collapse"/>
		<add as="13" action="expand"/>
		<add as="33" action="exitGroup"/>
		<add as="34" action="enterGroup"/>
		<add as="35" action="refresh"/>
		<add as="36" action="home"/>
		<add as="37" action="selectPrevious"/>
		<add as="38" action="selectParent"/>
		<add as="40" action="selectChild"/>
		<add as="39" action="selectNext"/>
		<add as="46" action="delete"/>
		<add as="65" control="1" action="selectAll"/>
		<add as="90" control="1" action="undo"/>
		<add as="89" control="1" action="redo"/>
		<add as="88" control="1" action="cut"/>
		<add as="67" control="1" action="copy"/>
		<add as="86" control="1" action="paste"/>
		<add as="71" control="1" action="group"/>
		<add as="85" control="1" action="ungroup"/>
		<add as="113" action="edit"/>
		<add as="107" action="zoomIn"/>
		<add as="109" action="zoomOut"/>
	</mxDefaultKeyHandler>
	<!-- keyhandler-commons.xml end -->
	
</mxEditor>
